---
- name: Gather Hardware Information
  block:
    - name: Assess system information
      hardware_global_info:
        id_offset: 1
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ results }}"
        results: {}

    - name: Detect AMD GPU
      hardware_gpu_amd:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect Intel GPU
      hardware_gpu_intel:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect Nvidia GPU
      hardware_gpu_nvidia:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect Nvidia toolkits
      hardware_gpu_toolkit_nvidia:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect Google Coral
      hardware_tpu_coral:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

  # Gather OS and App information
- name: Gather system information
  block:
    - name: Detect Apps
      software_apps:
        apps: "{{ apps_to_check }}"
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect docker
      software_docker:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect internet
      software_internet:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect service APIs
      software_service_api:
        apis: "{{ apis_to_test }}"
        timeout: "{{ api_test_timeout }}"
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

    - name: Detect system security
      software_system_security:
        id_offset: "{{ inspection_report.ansible_facts.speech.next_id }}"
        log_path: "{{ module_log_path }}/{{ inventory_hostname | replace('.','_') }}_inspection.log"
      register: results

    - name: Update inspection report
      ansible.builtin.set_fact:
        inspection_report: "{{ inspection_report | merge_dicts(results) }}"
        results: {}

# Split Inspection report into separate objects
- name: Separate action, data, speech facts
  ansible.builtin.set_fact:
    recommended_actions: "{{ inspection_report.ansible_facts.actions }}"
    system_data: "{{ inspection_report.ansible_facts.data }}"
    speech: "{{ inspection_report.ansible_facts.speech }}"

- name: Display Recommended Actions
  ansible.builtin.debug:
    var: recommended_actions
  when: show_actions | default(false) | bool

- name: Display system data
  ansible.builtin.debug:
    var: system_data
  when: show_data | default(false) | bool

- name: Display Speech
  ansible.builtin.debug:
    var: speech
  when: show_speech | default(false) | bool

- name: Extract 'text' values from speech data
  ansible.builtin.set_fact:
    speech_texts: "{{ speech | extract_key('text') }}"

- name: Display speech texts
  ansible.builtin.debug:
    var: speech_texts
  when: show_speech_texts | default(false) | bool